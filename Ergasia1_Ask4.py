import math
def method(A,q):
    G = [[0 for j in range(15)] for i in range(15)]
    for i in range(15):
        sum1 = 0
        for j in range(15):
            sum1 = sum1 + A[i][j]
        for k in range(15):
            G[k][i] = (q/ 15) + ((A[i][k] * (1 - q)) / sum1)

    sum2 = [0 for i in range(15)]
    Κ = [0 for i in range(15)]
    for i in range(15):
        if i % 2 == 0:
            Κ[i] = 0.1487
        else:
            Κ[i] = 0.1398
    eigenvalue = [0 for i in range(15)]
    l = 0
    temp = 1
    while True:
        if temp:
            sum2 = [0 for z in range(15)]
            for i in range(15):
                for j in range(15):
                    sum2[i] = sum2[i] + (G[i][j] * Κ[j])
            eigenvalue[l] = round(sum2[0], 5)
            if l != 0:
                if abs(eigenvalue[l] - eigenvalue[l - 1] < 0.00005):
                    temp = 0
                    break
            for c in range(15):
                Κ[c] = sum2[c] / eigenvalue[l]
            l = l + 1
        else:
            break

    sum_row = 0

    for i in range(15):
        sum_row = sum_row + (sum2[i] * sum2[i])
    sum_row = math.sqrt(sum_row)

    for i in range(15):
        sum2[i] = sum2[i] / sum_row

    sum_row = 0
    for i in range(15):
        sum_row = sum_row + sum2[i]

    for i in range(15):
        sum2[i] = sum2[i] / sum_row

    for i in range(15):
        sum2[i] = format(sum2[i], '.6f')

    print(sum2)


print("Ο πίνακας Α είναι: ")
A = [[0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
     [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
     [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
     [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
     [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
     [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0]]


for i in range(15):
    print(A[i])

print("Για τον πίνακα Α με χρήση της γνωστής μεθοδολογίας προκύπτουν οι παρακάτω τάξεις της κάθε σελίδας: \n")
method(A, 0.15)


print("Ο πίνακας Α με τέσσερις νέες συνδέσεις στην 13η σελίδα και αφαίρεση μίας σύνδεσης από την 11η σελίδα είναι: ")
A_new1 = [[0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
          [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
          [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
          [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
          [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
          [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0]]

for i in range(15):
    print(A_new1[i])

print("\nΓια τον αλλαγμένο πίνακα Α προκύπτουν οι παρακάτω τάξεις της κάθε σελίδας: ")
method(A_new1, 0.15)
print("Εφαρμόζοντας τις αλλαγές αυτές ανέβηκε η σημαντικότητα της 13ης σελίδας.\n")

print("Για q=0.02 προκύπτουν οι παρακάτω τάξεις της κάθε σελίδας του καινούριου πίνακα Α:")
method(A_new1, 0.02)

print("Ενώ για q=0.6 έχουμε:")
method(A_new1, 0.6)

print("Το q καθορίζει την πιθνότητα ο χρήστης να πάει από τη σελίδα ατην οποία βρίσκεται σε μία άλλη συνδεδεμένη, σε "
      "κάποια τυχαία ή μη συνδεδεμένη.\n")

A_new2 = [[0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
          [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
          [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
          [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
          [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0]]

print("Για τον αλλαγμένο πίνακα Α (έτσι ώστε να μπορεί η 11η σελίδα να περάσει σε σημαντικότητα την 10η) προκύπτουν οι "
      "παρακάτω τάξεις της κάθε σελίδας:")
method(A_new2, 0.15)
print("Η στρατηγική ωστόσο δεν δουλεύει.")
